// src/lib/trial.ts
import { prisma } from "./prisma";
import { hash, deviceFingerprintCoarse } from "./privacy";

/** VÃ©rifie si on peut accorder un essai 3 jours sans CB. */
export async function canGrantTrial(params: {
  email: string;
  deviceInfo: { userAgent?: string | null; language?: string | null; timezone?: string | null; ip?: string | null; };
}) {
  const emailHash = hash(params.email.toLowerCase());
  const deviceHash = deviceFingerprintCoarse(params.deviceInfo);
  const windowAgo = new Date(Date.now() - 90 * 24 * 3600 * 1000);

  const byEmail = await prisma.trialLog.findFirst({ where: { emailHash } });
  if (byEmail) return { ok: false as const, reason: "email_used" };

  const recent = await prisma.trialLog.findFirst({
    where: {
      OR: [{ deviceHash }, { ip: params.deviceInfo.ip || undefined }],
      createdAt: { gte: windowAgo }
    }
  });
  if (recent) return { ok: false as const, reason: "device_or_ip_recent_trial" };

  return { ok: true as const, emailHash, deviceHash };
}

/** Accorde l'essai: crÃ©e plan="trial" scope="all" pendant 3 jours + log anti-abus. */
export async function grantTrial(params: {
  userId: string;
  email: string;
  learningMode?: string;
  deviceInfo: { userAgent?: string | null; language?: string | null; timezone?: string | null; ip?: string | null; };
}) {
  const { ok, emailHash, deviceHash, reason } = await canGrantTrial({ email: params.email, deviceInfo: params.deviceInfo });
  if (!ok) return { ok, reason };

  const endsAt = new Date(Date.now() + 3 * 24 * 3600 * 1000);
  await prisma.subscription.create({
    data: {
      userId: params.userId,
      plan: "trial",
      learningMode: params.learningMode ?? "normal",
      scope: "all",
      endsAt
    }
  });

  await prisma.trialLog.create({
    data: {
      userId: params.userId,
      emailHash: emailHash!,
      deviceHash: deviceHash!,
      ip: params.deviceInfo.ip || undefined
    }
  });

  return { ok: true as const, endsAt };
}

export async function isTrialActive(userId: string) {
  const sub = await prisma.subscription.findFirst({
    where: { userId, plan: "trial", endsAt: { gte: new Date() } },
    orderBy: { endsAt: "desc" }
  });
  return Boolean(sub);
}

export async function trialDaysLeft(userId: string) {
  const sub = await prisma.subscription.findFirst({
    where: { userId, plan: "trial" },
    orderBy: { endsAt: "desc" }
  });
  if (!sub) return 0;
  const ms = new Date(sub.endsAt).getTime() - Date.now();
  return ms > 0 ? Math.ceil(ms / (24 * 3600 * 1000)) : 0;
}
