generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Badge {
  key         String      @id
  name        String
  description String?
  icon        String?
  points      Int         @default(0)
  createdAt   DateTime    @default(now())
  UserBadge   UserBadge[]
}

model PasswordResetToken {
  id      String   @id
  token   String   @unique
  userId  String
  expires DateTime
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id
  userId               String    @unique
  plan                 String
  grade                String
  subjectsJson         String    @default("[]")
  status               String
  stripeSubscriptionId String?   @unique
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  User                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String               @id
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  passwordHash       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  stripeCustomerId   String?              @unique
  Account            Account[]
  PasswordResetToken PasswordResetToken[]
  Session            Session[]
  Subscription       Subscription?
  UserBadge          UserBadge[]
  UserBillingStreak  UserBillingStreak?
  UserProgress       UserProgress[]
}

model UserBadge {
  id       String   @id
  userId   String
  badgeKey String
  earnedAt DateTime @default(now())
  metaJson String?
  Badge    Badge    @relation(fields: [badgeKey], references: [key], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeKey])
}

model UserBillingStreak {
  userId            String    @id
  consecutiveMonths Int       @default(0)
  lastPeriodEnd     DateTime?
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String @id
  userId     String
  subject    String
  grade      String
  xp         Int    @default(0)
  badgesJson String @default("[]")
  User       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subject, grade])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSubscription {
  id                String    @id @default(cuid())
  userId            String
  /// "mode" | "skin" | "subject" | "pack"
  type              String
  /// ex: "tdah" | "neon" | "maths-5e" | "pack3" | "family"
  key               String
  /// pour type="subject" -> "normal" | "gold" | "platine"
  plan              String?
  /// "active" | "trialing" | "canceled" | "incomplete" | ...
  status            String
  stripeCustomerId  String?
  stripeSubId       String?   @unique
  stripePriceId     String?
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId, type, key])
  @@index([userId, status])
}

// --- Site Sciences additions (2025-10-03) ---
model Subscription {
  id            String   @id
  userId        String
  plan          String   // "normal" | "gold" | "platine"
  learningMode  String   // "normal" | "tdah" | "dys"
  scope         String   // "all" (s’applique à toutes matières/niveaux)
  startsAt      DateTime
  endsAt        DateTime?
  trial         Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  user          User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Trial {
  id        String   @id
  userId    String
  kind      String   // "no-card-7d" | "with-card-3d" etc.
  startedAt DateTime @default(now())
  endsAt    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model ChapterAccess {
  id          String   @id
  userId      String
  subject     String   // ex "physique-chimie"
  level       String   // ex "terminale"
  chapterKey  String   // ex "fentes-de-young"
  purchasedAt DateTime @default(now())
  priceCents  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        User     @relation(fields: [userId], references: [id])
  @@index([userId, subject, level, chapterKey], name: "chapter_unique_idx")
}

model ParentProfile {
  id           String   @id
  userId       String   // élève
  email        String
  wantsReports Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model UserDevice {
  id        String   @id
  userId    String
  uaHash    String   // hash d’User-Agent
  ipHash    String   // hash IP coarse
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId, uaHash, ipHash])
}
