generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  passwordHash       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  stripeCustomerId   String?
  Account            Account[]
  PasswordResetToken PasswordResetToken[]
  Session            Session[]
  Subscription       Subscription[]
  UserBillingStreak  UserBillingStreak?
  UserProgress       UserProgress[]
  UserBadge_old      UserBadge_old[]
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Badge {
  key         String   
  name        String
  description String?
  icon        String?
  points      Int      (0)
  createdAt   DateTime (now())

  userBadges  UserBadge[]
}


/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model UserBadge {
  id        String    (cuid())
  userId    String
  badgeKey  String
  earnedAt  DateTime (now())
  metaJson  String?

  badge Badge (fields: [badgeKey], references: [key], onDelete: Cascade, onUpdate: Cascade)

  @([userId, badgeKey], name: "UserBadge_user_badge_unique")
  @([userId])
  @([badgeKey])
}


model UserBillingStreak {
  userId            String    @id
  consecutiveMonths Int       @default(0)
  lastPeriodEnd     DateTime?
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String @id @default(cuid())
  userId     String
  subject    String
  grade      String
  xp         Int    @default(0)
  badgesJson String @default("[]")
  User       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subject, grade], map: "UserProgress_user_subject_grade_unique")
  @@unique([userId, subject, grade])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Subscription {
  id        String?  @id @default(cuid())
  userId    String
  plan      String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_subscription_userId")
  @@ignore
}

model UserBadge_old {
  id       String   @id
  userId   String
  badgeKey String
  earnedAt DateTime @default(now())
  metaJson String?
  Badge    Badge    @relation(fields: [badgeKey], references: [key], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeKey], map: "sqlite_autoindex__UserBadge_old_2")
  @@index([badgeKey], map: "UserBadge_badgeKey_idx")
  @@index([userId], map: "UserBadge_userId_idx")
  @@map("_UserBadge_old")
}

model UserSubscription {
  id               String   @id @default(cuid())
  userId           String
  type             String   // "mode" | "skin" | "subject" | "pack"
  key              String   // ex: "tdah" | "neon" | "pc-1re" | "pack3"
  plan             String?  // ex: "normal" | "gold" | "platine" (pour type=subject)
  status           String   // "active" | "trialing" | "canceled" | "incomplete" | ...
  stripeCustomerId String?
  stripeSubId      String?  @unique
  stripePriceId    String?
  currentPeriodEnd DateTime?
  cancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, type, key])
  @@index([userId, status])
}
