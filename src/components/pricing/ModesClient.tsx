'use client'
import Link from 'next/link'
import { useState } from 'react'
import Modal from '@/components/ui/Modal'

const EUR = 'â‚¬'
const P_MODE = Number(process.env.NEXT_PUBLIC_PRICE_EUR_MODE ?? 0)

type Props = { entModes: string[] }
type ModeKey = 'tdah' | 'dys' | 'tsa' | 'hpi'

const MODES: Array<{
  key: ModeKey
  title: string
  points: string[]
  example: string
  cta: string
}> = [
  {
    key: 'tdah',
    title: 'Mode TDAH',
    points: [
      'Interface aÃ©rÃ©e, Ã©tapes courtes (chunking) + petite minuterie.',
      'RÃ©duction des distracteurs (Ã©lÃ©ments non essentiels masquÃ©s).',
      'Objectifs micro-validants + feedback immÃ©diat (dopamine-friendly).',
    ],
    example:
      'Un exercice est dÃ©coupÃ© en micro-Ã©tapes avec un indicateur de progression clair (1/5, 2/5â€¦).',
    cta: 'Activer ce mode â€” ',
  },
  {
    key: 'dys',
    title: 'Mode DYS',
    points: [
      'Police adaptÃ©e, interlignage/espacement accrus, contrastes doux.',
      'Consignes reformulÃ©es + pictogrammes (phrases courtes).',
      'Lecture audio des Ã©noncÃ©s et mise en Ã©vidence des mots importants.',
    ],
    example:
      'Les mots complexes sont surlignÃ©s et peuvent Ãªtre lus Ã  voix haute en un clic.',
    cta: 'Activer ce mode â€” ',
  },
  {
    key: 'tsa',
    title: 'Mode TSA',
    points: [
      'PrÃ©visibilitÃ© : plan clair en haut de la page, pas de changement brutal.',
      'ContrÃ´les sensoriels (sons/animations off par dÃ©faut), thÃ¨mes calmes.',
      'Guides visuels rÃ©currents (mÃªmes icÃ´nes, mÃªmes motifs) pour ancrer les repÃ¨res.',
    ],
    example:
      'Un bandeau Â« Aujourdâ€™hui Â» rÃ©sume les 3 tÃ¢ches avec cases Ã  cocher.',
    cta: 'Activer ce mode â€” ',
  },
  {
    key: 'hpi',
    title: 'Mode HPI',
    points: [
      'AccÃ¨s Ã  des dÃ©fis avancÃ©s + chemins accÃ©lÃ©rÃ©s.',
      'Explications condensÃ©es avec liens dâ€™approfondissement (optionnels).',
      'Tableau de bord ambitieux, badges Ã©lite.',
    ],
    example:
      'Un bouton Â« Challenge Â» propose une variante plus abstraite de lâ€™exercice.',
    cta: 'Activer ce mode â€” ',
  },
]

function price(n: number) {
  return n ? `${n.toFixed(2)} ${EUR}` : 'â€”'
}

/** CONTENUS DE DEMO (avant vs mode) **/
function DemoPanel({
  title,
  children,
}: {
  title: string
  children: React.ReactNode
}) {
  return (
    <div className="demo2-panel">
      <div className="demo2-title">{title}</div>
      <div className="demo2-card">{children}</div>
    </div>
  )
}

function DemoTDAH() {
  return (
    <div className="demo2-grid">
      <DemoPanel title="Avant (interface classique)">
        <p>
          Exercice : <strong>Ã‰nergie cinÃ©tique</strong>
        </p>
        <p>
          Ã‰noncÃ© sur un long bloc de texte, Ã©lÃ©ments dÃ©coratifs visibles, aucune
          indication dâ€™Ã©tape.
        </p>
        <ul className="list-disc pl-5 text-sm">
          <li>Aucune minuterie</li>
          <li>Beaucoup dâ€™Ã©lÃ©ments concurrents</li>
        </ul>
      </DemoPanel>
      <DemoPanel title="Mode TDAH (chunking + timer)">
        <div className="chip-row">
          <span className="chip">Ã‰tape 1/5</span>
          <span className="chip">00:25</span>
        </div>
        <p className="mb-2">
          Lis lâ€™Ã©noncÃ© en 20 secondes. Les Ã©lÃ©ments secondaires sont masquÃ©s.
        </p>
        <div className="progress">
          <span style={{ width: '20%' }} />
        </div>
        <p className="text-xs text-gray-600 mt-2">
          Mini-rÃ©compenses visuelles Ã  chaque Ã©tape complÃ©tÃ©e ðŸŽ‰
        </p>
      </DemoPanel>
    </div>
  )
}

function DemoDYS() {
  return (
    <div className="demo2-grid">
      <DemoPanel title="Avant (texte dense)">
        <p className="text-sm">
          Â« La premiÃ¨re loi de Newton indique quâ€™un corps conserve son Ã©tat si
          la somme des forces est nulleâ€¦ Â»
        </p>
      </DemoPanel>
      <DemoPanel title="Mode DYS (espacement + syllabation)">
        <p className="dys-text">
          La <span className="dys-strong">preÂ·miÃ¨re</span> loi (inertie) : un
          corps conserve son Ã©tat de repos ou de{' '}
          <span className="dys-strong">mouÂ·veÂ·ment</span> rectiÂ·liÂ·gne
          uniÂ·forÂ·me si la somme des forces est nulle.
        </p>
        <div className="demo2-actions">
          <button className="btn-outline">ðŸ”Š Lire Ã  voix haute</button>
          <button className="btn-outline">Syllabation âœ”</button>
          <button className="btn-outline">Mots-clÃ©s âœ”</button>
        </div>
      </DemoPanel>
    </div>
  )
}

function DemoTSA() {
  return (
    <div className="demo2-grid">
      <DemoPanel title="Avant (navigation changeante)">
        <p>Les boutons et encarts changent de place selon les pages.</p>
      </DemoPanel>
      <DemoPanel title="Mode TSA (prÃ©visible & calme)">
        <div className="plan">
          <div className="plan-title">Plan dâ€™aujourdâ€™hui</div>
          {['Lire lâ€™Ã©noncÃ©', 'Faire 3 questions', 'Valider et revoir'].map(
            (t, i) => (
              <label key={i} className="plan-item">
                <input type="checkbox" /> {t}
              </label>
            ),
          )}
        </div>
        <p className="text-sm text-gray-600 mt-2">
          MÃªmes repÃ¨res, pas dâ€™animations brusques, thÃ¨me adouci.
        </p>
      </DemoPanel>
    </div>
  )
}

function DemoHPI() {
  return (
    <div className="demo2-grid">
      <DemoPanel title="Avant (explications longues)">
        <p>Paragraphe thÃ©orique verbeux et sans niveaux de lecture.</p>
      </DemoPanel>
      <DemoPanel title="Mode HPI (condensÃ© + challenge)">
        <p className="text-sm">
          <strong>CondensÃ© :</strong> si f est dÃ©rivable en a, alors{' '}
          <code>lim(xâ†’a)[(f(x)-f(a))/(x-a)] = fâ€™(a)</code>.
        </p>
        <div className="demo2-actions">
          <button className="btn-outline">ðŸ”¬ Challenge</button>
          <button className="btn-outline">â†— Approfondir</button>
        </div>
      </DemoPanel>
    </div>
  )
}

function DemoFor({ mode }: { mode: ModeKey }) {
  if (mode === 'tdah') return <DemoTDAH />
  if (mode === 'dys') return <DemoDYS />
  if (mode === 'tsa') return <DemoTSA />
  return <DemoHPI />
}

export default function ModesClient({ entModes }: Props) {
  const [modal, setModal] = useState<null | ModeKey>(null)

  return (
    <div>
      <h2 className="text-xl font-semibold mb-3">Modes dâ€™apprentissage</h2>
      <p className="text-sm text-gray-600 mb-2">
        Le mode <strong>Normal</strong> est inclus gratuitement pour tous.
      </p>
      <div className="grid lg:grid-cols-2 gap-3">
        {MODES.map((m) => {
          const has = entModes.includes(m.key)
          return (
            <div key={m.key} className="border rounded p-4">
              <div className="font-semibold">{m.title}</div>
              <ul className="mt-2 text-sm list-disc pl-5 space-y-1">
                {m.points.map((p, i) => (
                  <li key={i}>{p}</li>
                ))}
              </ul>
              <p className="text-sm text-gray-600 mt-2">
                <em>Exemple :</em> {m.example}
              </p>
              <div className="mt-2 flex flex-wrap gap-3 items-center">
                {has ? (
                  <span className="text-xs px-2 py-1 rounded bg-green-100 text-green-700">
                    DÃ©jÃ  inclus
                  </span>
                ) : (
                  <Link
                    href={`/api/checkout?tab=modes&mode=${m.key}`}
                    className="text-sm underline"
                  >
                    {m.cta}
                    {price(P_MODE)}/mois
                  </Link>
                )}
                <button
                  className="text-sm btn-accent"
                  onClick={() => setModal(m.key)}
                >
                  Voir un exemple
                </button>
              </div>
            </div>
          )
        })}
      </div>

      {/* Modal plein Ã©cran */}
      <Modal
        open={modal !== null}
        title={modal ? MODES.find((x) => x.key === modal)?.title : undefined}
        onClose={() => setModal(null)}
      >
        {modal && (
          <>
            <DemoFor mode={modal} />
            <div className="mt-4 flex items-center justify-between flex-wrap gap-3">
              <p className="text-sm text-gray-600">
                Cette prÃ©visualisation illustre lâ€™adaptation concrÃ¨te des cours,
                exercices et consignes.
              </p>
              <Link
                href={`/tarifs/mode-d-apprentissage/${modal}`}
                className="btn-cta"
              >
                Aller Ã  lâ€™offre {price(P_MODE)}/mois
              </Link>
            </div>
          </>
        )}
      </Modal>

      <p className="text-xs text-gray-500 mt-3">
        Conseil : commencez par le mode qui vous ressemble le plus â€” vous
        pourrez en changer Ã  tout moment.
      </p>
    </div>
  )
}
