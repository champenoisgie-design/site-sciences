generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  stripeCustomerId String?  @unique
  subscription     Subscription?
  id                   String   @id @default(cuid())
  name                 String?
  email                String?  @unique
  emailVerified        DateTime?
  image                String?
  passwordHash         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt


  accounts             Account[]
  sessions             Session[]
  passwordResetTokens  PasswordResetToken[]
  progress             UserProgress[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String   @id @default(cuid())
  userId     String
  subject    String
  grade      String
  xp         Int      @default(0)
  badgesJson String   @default("[]")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subject, grade])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  plan                 String   // bronze | gold | platine
  grade                String   // ex: "Terminale"
  subjectsJson         String   @default("[]") // ["Maths","Physique-Chimie","SVT"]
  status               String   // active | incomplete | past_due | canceled | unpaid
  stripeSubscriptionId String?
  currentPeriodEnd     DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([stripeSubscriptionId])
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}

enum Plan {
  BRONZE
  GOLD
  PLATINE
}
